buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype-snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        dependencies {
            classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        }
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

repositories {
    mavenCentral()
    maven {
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        url = 'http://repo.tridevmc.com/'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

def branch
if (System.env.BRANCH_NAME) {
    // Jenkins support
    branch = System.env.BRANCH_NAME
    branch = branch.substring(branch.lastIndexOf('/') + 1)
} else {
    branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
}
def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()

version = branch + '-' + modVersion + '.' + commits + (dirty ? '-dirty' : '')
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = project.forgeVersion
    mappings = project.mcpVersion

    runDir = 'run'

    def replacementVersion = 'MOD_VERSION = \"' + project.version + '\"'
    replace("MOD_VERSION = \"@AS+VER@\"",
            replacementVersion)
}

dependencies {
    compileOnly project(':MovingWorld')

    compile 'com.elytradev.concrete:concrete-all:' + project.concreteVersion
}

shadowJar {
    exclude 'dummyThing'
    classifier = 'full'

    // Shaded under movingworld because of some references to MovingWorld networking.
    relocate 'com.elytradev.concrete', "com.elytradev.movingworld.repackage.com.elytradev.concrete"
}

reobf {
    shadowJar { mappingType = 'SEARGE' }
}

artifacts {
    archives shadowJar
}

configurations {
    runtime.exclude group: 'com.elytradev.movingworld'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

idea {
    workspace {
        iws.withXml { xmlFile ->
            //Please don't kill me for my shitty groovy usage ;-;
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

            def minecraftClientDefaults = runManager.configuration.find {
                it.@name == 'Minecraft Client' && it.@type == 'Application'
            }

            def minecraftServerDefaults = runManager.configuration.find {
                it.@name == 'Minecraft Server' && it.@type == 'Application'
            }

            def minecraftClientVMArgs = '-Xincgc -Xmx1024M -Xms1024M -Dfml.coreMods.load=com.elytradev.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
            minecraftClientDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                option(name: 'VM_PARAMETERS', value: minecraftClientVMArgs)
            }

            def minecraftServerVMArgs = '-Xincgc -Dfml.ignoreInvalidMinecraftCertificates=true -Dfml.coreMods.load=com.elytradev.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
            minecraftServerDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                option(name: 'VM_PARAMETERS', value: minecraftServerVMArgs)
            }
        }
    }
}
