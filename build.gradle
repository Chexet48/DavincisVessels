buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply from: "properties.gradle"

evaluationDependsOn(":MovingWorld")

apply plugin: "net.minecraftforge.gradle"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"

def branch
if (System.env.BRANCH_NAME) {
    // Jenkins support
    branch = System.env.BRANCH_NAME
    branch = branch.substring(branch.lastIndexOf('/') + 1)
} else {
    branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
}
def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()

version = branch + '-' + modVersion + '.' + commits + (dirty ? '-dirty' : '')
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.

ext {
    compoundClassesDir = file('build/classes/java/main')
}

configurations {
    nonModDep
    runtime.exclude group: "com.tridevmc.MovingWorld"
}

minecraft {
    mappings channel: "snapshot", version: mappingsVersion

    runs {
        client {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "REGISTRIES"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            mods {
                davincisvessels {
                    sources sourceSets.main
                }
                movingworld {
                    sources project(":MovingWorld").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "REGISTRIES"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            mods {
                davincisvessels {
                    sources sourceSets.main
                }
                movingworld {
                    sources project(":MovingWorld").sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://repo.tridevmc.com/'
    }
}

dependencies {
    compileOnly project(":MovingWorld")

    minecraft "net.minecraftforge:forge:${forgeVersion}"

    compile "com.tridevmc.compound:compound-all:${compoundVersion}"
    nonModDep "com.tridevmc.compound:compound-all:${compoundVersion}"
}

task extractNonMod(type: Copy) {
    project.compoundClassesDir.delete()
    project.compoundClassesDir.mkdirs()
    from zipTree(project.configurations.nonModDep.find { it.name.startsWith("compound") })
    into project.compoundClassesDir
}

compileJava.dependsOn(extractNonMod)

shadowJar {
    classifier = ""

    dependencies {
        include(dependency("com.tridevmc.compound:compound-all:${compoundVersion}"))
    }

    relocate "com.tridevmc.compound", "${group}.compound"
}

tasks.build.dependsOn shadowJar

artifacts {
    archives shadowJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes(["Specification-Title"     : "Davincis Vessels",
                    "Specification-Vendor"    : "Trident",
                    "Specification-Version"   : "24.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "Trident",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}
